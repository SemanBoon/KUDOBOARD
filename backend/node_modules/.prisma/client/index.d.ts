
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model KudosBoard
 * 
 */
export type KudosBoard = $Result.DefaultSelection<Prisma.$KudosBoardPayload>
/**
 * Model KudosCard
 * 
 */
export type KudosCard = $Result.DefaultSelection<Prisma.$KudosCardPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more KudosBoards
 * const kudosBoards = await prisma.kudosBoard.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more KudosBoards
   * const kudosBoards = await prisma.kudosBoard.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.kudosBoard`: Exposes CRUD operations for the **KudosBoard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KudosBoards
    * const kudosBoards = await prisma.kudosBoard.findMany()
    * ```
    */
  get kudosBoard(): Prisma.KudosBoardDelegate<ExtArgs>;

  /**
   * `prisma.kudosCard`: Exposes CRUD operations for the **KudosCard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KudosCards
    * const kudosCards = await prisma.kudosCard.findMany()
    * ```
    */
  get kudosCard(): Prisma.KudosCardDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.15.1
   * Query Engine version: 5675a3182f972f1a8f31d16eee6abf4fd54910e3
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    KudosBoard: 'KudosBoard',
    KudosCard: 'KudosCard'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'kudosBoard' | 'kudosCard'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      KudosBoard: {
        payload: Prisma.$KudosBoardPayload<ExtArgs>
        fields: Prisma.KudosBoardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KudosBoardFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KudosBoardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KudosBoardFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KudosBoardPayload>
          }
          findFirst: {
            args: Prisma.KudosBoardFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KudosBoardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KudosBoardFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KudosBoardPayload>
          }
          findMany: {
            args: Prisma.KudosBoardFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KudosBoardPayload>[]
          }
          create: {
            args: Prisma.KudosBoardCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KudosBoardPayload>
          }
          createMany: {
            args: Prisma.KudosBoardCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KudosBoardCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KudosBoardPayload>[]
          }
          delete: {
            args: Prisma.KudosBoardDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KudosBoardPayload>
          }
          update: {
            args: Prisma.KudosBoardUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KudosBoardPayload>
          }
          deleteMany: {
            args: Prisma.KudosBoardDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.KudosBoardUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.KudosBoardUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KudosBoardPayload>
          }
          aggregate: {
            args: Prisma.KudosBoardAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateKudosBoard>
          }
          groupBy: {
            args: Prisma.KudosBoardGroupByArgs<ExtArgs>,
            result: $Utils.Optional<KudosBoardGroupByOutputType>[]
          }
          count: {
            args: Prisma.KudosBoardCountArgs<ExtArgs>,
            result: $Utils.Optional<KudosBoardCountAggregateOutputType> | number
          }
        }
      }
      KudosCard: {
        payload: Prisma.$KudosCardPayload<ExtArgs>
        fields: Prisma.KudosCardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KudosCardFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KudosCardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KudosCardFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KudosCardPayload>
          }
          findFirst: {
            args: Prisma.KudosCardFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KudosCardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KudosCardFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KudosCardPayload>
          }
          findMany: {
            args: Prisma.KudosCardFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KudosCardPayload>[]
          }
          create: {
            args: Prisma.KudosCardCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KudosCardPayload>
          }
          createMany: {
            args: Prisma.KudosCardCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KudosCardCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KudosCardPayload>[]
          }
          delete: {
            args: Prisma.KudosCardDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KudosCardPayload>
          }
          update: {
            args: Prisma.KudosCardUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KudosCardPayload>
          }
          deleteMany: {
            args: Prisma.KudosCardDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.KudosCardUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.KudosCardUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KudosCardPayload>
          }
          aggregate: {
            args: Prisma.KudosCardAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateKudosCard>
          }
          groupBy: {
            args: Prisma.KudosCardGroupByArgs<ExtArgs>,
            result: $Utils.Optional<KudosCardGroupByOutputType>[]
          }
          count: {
            args: Prisma.KudosCardCountArgs<ExtArgs>,
            result: $Utils.Optional<KudosCardCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model KudosBoard
   */

  export type AggregateKudosBoard = {
    _count: KudosBoardCountAggregateOutputType | null
    _avg: KudosBoardAvgAggregateOutputType | null
    _sum: KudosBoardSumAggregateOutputType | null
    _min: KudosBoardMinAggregateOutputType | null
    _max: KudosBoardMaxAggregateOutputType | null
  }

  export type KudosBoardAvgAggregateOutputType = {
    id: number | null
  }

  export type KudosBoardSumAggregateOutputType = {
    id: number | null
  }

  export type KudosBoardMinAggregateOutputType = {
    id: number | null
    imgUrl: string | null
    title: string | null
    category: string | null
    author: string | null
  }

  export type KudosBoardMaxAggregateOutputType = {
    id: number | null
    imgUrl: string | null
    title: string | null
    category: string | null
    author: string | null
  }

  export type KudosBoardCountAggregateOutputType = {
    id: number
    imgUrl: number
    title: number
    category: number
    author: number
    _all: number
  }


  export type KudosBoardAvgAggregateInputType = {
    id?: true
  }

  export type KudosBoardSumAggregateInputType = {
    id?: true
  }

  export type KudosBoardMinAggregateInputType = {
    id?: true
    imgUrl?: true
    title?: true
    category?: true
    author?: true
  }

  export type KudosBoardMaxAggregateInputType = {
    id?: true
    imgUrl?: true
    title?: true
    category?: true
    author?: true
  }

  export type KudosBoardCountAggregateInputType = {
    id?: true
    imgUrl?: true
    title?: true
    category?: true
    author?: true
    _all?: true
  }

  export type KudosBoardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KudosBoard to aggregate.
     */
    where?: KudosBoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KudosBoards to fetch.
     */
    orderBy?: KudosBoardOrderByWithRelationInput | KudosBoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KudosBoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KudosBoards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KudosBoards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KudosBoards
    **/
    _count?: true | KudosBoardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KudosBoardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KudosBoardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KudosBoardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KudosBoardMaxAggregateInputType
  }

  export type GetKudosBoardAggregateType<T extends KudosBoardAggregateArgs> = {
        [P in keyof T & keyof AggregateKudosBoard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKudosBoard[P]>
      : GetScalarType<T[P], AggregateKudosBoard[P]>
  }




  export type KudosBoardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KudosBoardWhereInput
    orderBy?: KudosBoardOrderByWithAggregationInput | KudosBoardOrderByWithAggregationInput[]
    by: KudosBoardScalarFieldEnum[] | KudosBoardScalarFieldEnum
    having?: KudosBoardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KudosBoardCountAggregateInputType | true
    _avg?: KudosBoardAvgAggregateInputType
    _sum?: KudosBoardSumAggregateInputType
    _min?: KudosBoardMinAggregateInputType
    _max?: KudosBoardMaxAggregateInputType
  }

  export type KudosBoardGroupByOutputType = {
    id: number
    imgUrl: string
    title: string
    category: string
    author: string
    _count: KudosBoardCountAggregateOutputType | null
    _avg: KudosBoardAvgAggregateOutputType | null
    _sum: KudosBoardSumAggregateOutputType | null
    _min: KudosBoardMinAggregateOutputType | null
    _max: KudosBoardMaxAggregateOutputType | null
  }

  type GetKudosBoardGroupByPayload<T extends KudosBoardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KudosBoardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KudosBoardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KudosBoardGroupByOutputType[P]>
            : GetScalarType<T[P], KudosBoardGroupByOutputType[P]>
        }
      >
    >


  export type KudosBoardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    imgUrl?: boolean
    title?: boolean
    category?: boolean
    author?: boolean
  }, ExtArgs["result"]["kudosBoard"]>

  export type KudosBoardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    imgUrl?: boolean
    title?: boolean
    category?: boolean
    author?: boolean
  }, ExtArgs["result"]["kudosBoard"]>

  export type KudosBoardSelectScalar = {
    id?: boolean
    imgUrl?: boolean
    title?: boolean
    category?: boolean
    author?: boolean
  }


  export type $KudosBoardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KudosBoard"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      imgUrl: string
      title: string
      category: string
      author: string
    }, ExtArgs["result"]["kudosBoard"]>
    composites: {}
  }

  type KudosBoardGetPayload<S extends boolean | null | undefined | KudosBoardDefaultArgs> = $Result.GetResult<Prisma.$KudosBoardPayload, S>

  type KudosBoardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KudosBoardFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KudosBoardCountAggregateInputType | true
    }

  export interface KudosBoardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KudosBoard'], meta: { name: 'KudosBoard' } }
    /**
     * Find zero or one KudosBoard that matches the filter.
     * @param {KudosBoardFindUniqueArgs} args - Arguments to find a KudosBoard
     * @example
     * // Get one KudosBoard
     * const kudosBoard = await prisma.kudosBoard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KudosBoardFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, KudosBoardFindUniqueArgs<ExtArgs>>
    ): Prisma__KudosBoardClient<$Result.GetResult<Prisma.$KudosBoardPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one KudosBoard that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {KudosBoardFindUniqueOrThrowArgs} args - Arguments to find a KudosBoard
     * @example
     * // Get one KudosBoard
     * const kudosBoard = await prisma.kudosBoard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends KudosBoardFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KudosBoardFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__KudosBoardClient<$Result.GetResult<Prisma.$KudosBoardPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first KudosBoard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KudosBoardFindFirstArgs} args - Arguments to find a KudosBoard
     * @example
     * // Get one KudosBoard
     * const kudosBoard = await prisma.kudosBoard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KudosBoardFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, KudosBoardFindFirstArgs<ExtArgs>>
    ): Prisma__KudosBoardClient<$Result.GetResult<Prisma.$KudosBoardPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first KudosBoard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KudosBoardFindFirstOrThrowArgs} args - Arguments to find a KudosBoard
     * @example
     * // Get one KudosBoard
     * const kudosBoard = await prisma.kudosBoard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends KudosBoardFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KudosBoardFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__KudosBoardClient<$Result.GetResult<Prisma.$KudosBoardPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more KudosBoards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KudosBoardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KudosBoards
     * const kudosBoards = await prisma.kudosBoard.findMany()
     * 
     * // Get first 10 KudosBoards
     * const kudosBoards = await prisma.kudosBoard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kudosBoardWithIdOnly = await prisma.kudosBoard.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends KudosBoardFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KudosBoardFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KudosBoardPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a KudosBoard.
     * @param {KudosBoardCreateArgs} args - Arguments to create a KudosBoard.
     * @example
     * // Create one KudosBoard
     * const KudosBoard = await prisma.kudosBoard.create({
     *   data: {
     *     // ... data to create a KudosBoard
     *   }
     * })
     * 
    **/
    create<T extends KudosBoardCreateArgs<ExtArgs>>(
      args: SelectSubset<T, KudosBoardCreateArgs<ExtArgs>>
    ): Prisma__KudosBoardClient<$Result.GetResult<Prisma.$KudosBoardPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many KudosBoards.
     * @param {KudosBoardCreateManyArgs} args - Arguments to create many KudosBoards.
     * @example
     * // Create many KudosBoards
     * const kudosBoard = await prisma.kudosBoard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends KudosBoardCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KudosBoardCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KudosBoards and returns the data saved in the database.
     * @param {KudosBoardCreateManyAndReturnArgs} args - Arguments to create many KudosBoards.
     * @example
     * // Create many KudosBoards
     * const kudosBoard = await prisma.kudosBoard.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KudosBoards and only return the `id`
     * const kudosBoardWithIdOnly = await prisma.kudosBoard.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends KudosBoardCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, KudosBoardCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KudosBoardPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a KudosBoard.
     * @param {KudosBoardDeleteArgs} args - Arguments to delete one KudosBoard.
     * @example
     * // Delete one KudosBoard
     * const KudosBoard = await prisma.kudosBoard.delete({
     *   where: {
     *     // ... filter to delete one KudosBoard
     *   }
     * })
     * 
    **/
    delete<T extends KudosBoardDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, KudosBoardDeleteArgs<ExtArgs>>
    ): Prisma__KudosBoardClient<$Result.GetResult<Prisma.$KudosBoardPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one KudosBoard.
     * @param {KudosBoardUpdateArgs} args - Arguments to update one KudosBoard.
     * @example
     * // Update one KudosBoard
     * const kudosBoard = await prisma.kudosBoard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KudosBoardUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, KudosBoardUpdateArgs<ExtArgs>>
    ): Prisma__KudosBoardClient<$Result.GetResult<Prisma.$KudosBoardPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more KudosBoards.
     * @param {KudosBoardDeleteManyArgs} args - Arguments to filter KudosBoards to delete.
     * @example
     * // Delete a few KudosBoards
     * const { count } = await prisma.kudosBoard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KudosBoardDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KudosBoardDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KudosBoards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KudosBoardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KudosBoards
     * const kudosBoard = await prisma.kudosBoard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KudosBoardUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, KudosBoardUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one KudosBoard.
     * @param {KudosBoardUpsertArgs} args - Arguments to update or create a KudosBoard.
     * @example
     * // Update or create a KudosBoard
     * const kudosBoard = await prisma.kudosBoard.upsert({
     *   create: {
     *     // ... data to create a KudosBoard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KudosBoard we want to update
     *   }
     * })
    **/
    upsert<T extends KudosBoardUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, KudosBoardUpsertArgs<ExtArgs>>
    ): Prisma__KudosBoardClient<$Result.GetResult<Prisma.$KudosBoardPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of KudosBoards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KudosBoardCountArgs} args - Arguments to filter KudosBoards to count.
     * @example
     * // Count the number of KudosBoards
     * const count = await prisma.kudosBoard.count({
     *   where: {
     *     // ... the filter for the KudosBoards we want to count
     *   }
     * })
    **/
    count<T extends KudosBoardCountArgs>(
      args?: Subset<T, KudosBoardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KudosBoardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KudosBoard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KudosBoardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KudosBoardAggregateArgs>(args: Subset<T, KudosBoardAggregateArgs>): Prisma.PrismaPromise<GetKudosBoardAggregateType<T>>

    /**
     * Group by KudosBoard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KudosBoardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KudosBoardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KudosBoardGroupByArgs['orderBy'] }
        : { orderBy?: KudosBoardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KudosBoardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKudosBoardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KudosBoard model
   */
  readonly fields: KudosBoardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KudosBoard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KudosBoardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the KudosBoard model
   */ 
  interface KudosBoardFieldRefs {
    readonly id: FieldRef<"KudosBoard", 'Int'>
    readonly imgUrl: FieldRef<"KudosBoard", 'String'>
    readonly title: FieldRef<"KudosBoard", 'String'>
    readonly category: FieldRef<"KudosBoard", 'String'>
    readonly author: FieldRef<"KudosBoard", 'String'>
  }
    

  // Custom InputTypes
  /**
   * KudosBoard findUnique
   */
  export type KudosBoardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KudosBoard
     */
    select?: KudosBoardSelect<ExtArgs> | null
    /**
     * Filter, which KudosBoard to fetch.
     */
    where: KudosBoardWhereUniqueInput
  }

  /**
   * KudosBoard findUniqueOrThrow
   */
  export type KudosBoardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KudosBoard
     */
    select?: KudosBoardSelect<ExtArgs> | null
    /**
     * Filter, which KudosBoard to fetch.
     */
    where: KudosBoardWhereUniqueInput
  }

  /**
   * KudosBoard findFirst
   */
  export type KudosBoardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KudosBoard
     */
    select?: KudosBoardSelect<ExtArgs> | null
    /**
     * Filter, which KudosBoard to fetch.
     */
    where?: KudosBoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KudosBoards to fetch.
     */
    orderBy?: KudosBoardOrderByWithRelationInput | KudosBoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KudosBoards.
     */
    cursor?: KudosBoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KudosBoards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KudosBoards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KudosBoards.
     */
    distinct?: KudosBoardScalarFieldEnum | KudosBoardScalarFieldEnum[]
  }

  /**
   * KudosBoard findFirstOrThrow
   */
  export type KudosBoardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KudosBoard
     */
    select?: KudosBoardSelect<ExtArgs> | null
    /**
     * Filter, which KudosBoard to fetch.
     */
    where?: KudosBoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KudosBoards to fetch.
     */
    orderBy?: KudosBoardOrderByWithRelationInput | KudosBoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KudosBoards.
     */
    cursor?: KudosBoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KudosBoards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KudosBoards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KudosBoards.
     */
    distinct?: KudosBoardScalarFieldEnum | KudosBoardScalarFieldEnum[]
  }

  /**
   * KudosBoard findMany
   */
  export type KudosBoardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KudosBoard
     */
    select?: KudosBoardSelect<ExtArgs> | null
    /**
     * Filter, which KudosBoards to fetch.
     */
    where?: KudosBoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KudosBoards to fetch.
     */
    orderBy?: KudosBoardOrderByWithRelationInput | KudosBoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KudosBoards.
     */
    cursor?: KudosBoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KudosBoards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KudosBoards.
     */
    skip?: number
    distinct?: KudosBoardScalarFieldEnum | KudosBoardScalarFieldEnum[]
  }

  /**
   * KudosBoard create
   */
  export type KudosBoardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KudosBoard
     */
    select?: KudosBoardSelect<ExtArgs> | null
    /**
     * The data needed to create a KudosBoard.
     */
    data: XOR<KudosBoardCreateInput, KudosBoardUncheckedCreateInput>
  }

  /**
   * KudosBoard createMany
   */
  export type KudosBoardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KudosBoards.
     */
    data: KudosBoardCreateManyInput | KudosBoardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KudosBoard createManyAndReturn
   */
  export type KudosBoardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KudosBoard
     */
    select?: KudosBoardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many KudosBoards.
     */
    data: KudosBoardCreateManyInput | KudosBoardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KudosBoard update
   */
  export type KudosBoardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KudosBoard
     */
    select?: KudosBoardSelect<ExtArgs> | null
    /**
     * The data needed to update a KudosBoard.
     */
    data: XOR<KudosBoardUpdateInput, KudosBoardUncheckedUpdateInput>
    /**
     * Choose, which KudosBoard to update.
     */
    where: KudosBoardWhereUniqueInput
  }

  /**
   * KudosBoard updateMany
   */
  export type KudosBoardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KudosBoards.
     */
    data: XOR<KudosBoardUpdateManyMutationInput, KudosBoardUncheckedUpdateManyInput>
    /**
     * Filter which KudosBoards to update
     */
    where?: KudosBoardWhereInput
  }

  /**
   * KudosBoard upsert
   */
  export type KudosBoardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KudosBoard
     */
    select?: KudosBoardSelect<ExtArgs> | null
    /**
     * The filter to search for the KudosBoard to update in case it exists.
     */
    where: KudosBoardWhereUniqueInput
    /**
     * In case the KudosBoard found by the `where` argument doesn't exist, create a new KudosBoard with this data.
     */
    create: XOR<KudosBoardCreateInput, KudosBoardUncheckedCreateInput>
    /**
     * In case the KudosBoard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KudosBoardUpdateInput, KudosBoardUncheckedUpdateInput>
  }

  /**
   * KudosBoard delete
   */
  export type KudosBoardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KudosBoard
     */
    select?: KudosBoardSelect<ExtArgs> | null
    /**
     * Filter which KudosBoard to delete.
     */
    where: KudosBoardWhereUniqueInput
  }

  /**
   * KudosBoard deleteMany
   */
  export type KudosBoardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KudosBoards to delete
     */
    where?: KudosBoardWhereInput
  }

  /**
   * KudosBoard without action
   */
  export type KudosBoardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KudosBoard
     */
    select?: KudosBoardSelect<ExtArgs> | null
  }


  /**
   * Model KudosCard
   */

  export type AggregateKudosCard = {
    _count: KudosCardCountAggregateOutputType | null
    _avg: KudosCardAvgAggregateOutputType | null
    _sum: KudosCardSumAggregateOutputType | null
    _min: KudosCardMinAggregateOutputType | null
    _max: KudosCardMaxAggregateOutputType | null
  }

  export type KudosCardAvgAggregateOutputType = {
    id: number | null
    KBid: number | null
    upvote: number | null
  }

  export type KudosCardSumAggregateOutputType = {
    id: number | null
    KBid: number | null
    upvote: number | null
  }

  export type KudosCardMinAggregateOutputType = {
    id: number | null
    title: string | null
    gifUrl: string | null
    KBid: number | null
    description: string | null
    upvote: number | null
    owner: string | null
  }

  export type KudosCardMaxAggregateOutputType = {
    id: number | null
    title: string | null
    gifUrl: string | null
    KBid: number | null
    description: string | null
    upvote: number | null
    owner: string | null
  }

  export type KudosCardCountAggregateOutputType = {
    id: number
    title: number
    gifUrl: number
    KBid: number
    description: number
    upvote: number
    owner: number
    _all: number
  }


  export type KudosCardAvgAggregateInputType = {
    id?: true
    KBid?: true
    upvote?: true
  }

  export type KudosCardSumAggregateInputType = {
    id?: true
    KBid?: true
    upvote?: true
  }

  export type KudosCardMinAggregateInputType = {
    id?: true
    title?: true
    gifUrl?: true
    KBid?: true
    description?: true
    upvote?: true
    owner?: true
  }

  export type KudosCardMaxAggregateInputType = {
    id?: true
    title?: true
    gifUrl?: true
    KBid?: true
    description?: true
    upvote?: true
    owner?: true
  }

  export type KudosCardCountAggregateInputType = {
    id?: true
    title?: true
    gifUrl?: true
    KBid?: true
    description?: true
    upvote?: true
    owner?: true
    _all?: true
  }

  export type KudosCardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KudosCard to aggregate.
     */
    where?: KudosCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KudosCards to fetch.
     */
    orderBy?: KudosCardOrderByWithRelationInput | KudosCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KudosCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KudosCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KudosCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KudosCards
    **/
    _count?: true | KudosCardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KudosCardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KudosCardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KudosCardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KudosCardMaxAggregateInputType
  }

  export type GetKudosCardAggregateType<T extends KudosCardAggregateArgs> = {
        [P in keyof T & keyof AggregateKudosCard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKudosCard[P]>
      : GetScalarType<T[P], AggregateKudosCard[P]>
  }




  export type KudosCardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KudosCardWhereInput
    orderBy?: KudosCardOrderByWithAggregationInput | KudosCardOrderByWithAggregationInput[]
    by: KudosCardScalarFieldEnum[] | KudosCardScalarFieldEnum
    having?: KudosCardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KudosCardCountAggregateInputType | true
    _avg?: KudosCardAvgAggregateInputType
    _sum?: KudosCardSumAggregateInputType
    _min?: KudosCardMinAggregateInputType
    _max?: KudosCardMaxAggregateInputType
  }

  export type KudosCardGroupByOutputType = {
    id: number
    title: string
    gifUrl: string
    KBid: number
    description: string
    upvote: number
    owner: string
    _count: KudosCardCountAggregateOutputType | null
    _avg: KudosCardAvgAggregateOutputType | null
    _sum: KudosCardSumAggregateOutputType | null
    _min: KudosCardMinAggregateOutputType | null
    _max: KudosCardMaxAggregateOutputType | null
  }

  type GetKudosCardGroupByPayload<T extends KudosCardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KudosCardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KudosCardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KudosCardGroupByOutputType[P]>
            : GetScalarType<T[P], KudosCardGroupByOutputType[P]>
        }
      >
    >


  export type KudosCardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    gifUrl?: boolean
    KBid?: boolean
    description?: boolean
    upvote?: boolean
    owner?: boolean
  }, ExtArgs["result"]["kudosCard"]>

  export type KudosCardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    gifUrl?: boolean
    KBid?: boolean
    description?: boolean
    upvote?: boolean
    owner?: boolean
  }, ExtArgs["result"]["kudosCard"]>

  export type KudosCardSelectScalar = {
    id?: boolean
    title?: boolean
    gifUrl?: boolean
    KBid?: boolean
    description?: boolean
    upvote?: boolean
    owner?: boolean
  }


  export type $KudosCardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KudosCard"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      gifUrl: string
      KBid: number
      description: string
      upvote: number
      owner: string
    }, ExtArgs["result"]["kudosCard"]>
    composites: {}
  }

  type KudosCardGetPayload<S extends boolean | null | undefined | KudosCardDefaultArgs> = $Result.GetResult<Prisma.$KudosCardPayload, S>

  type KudosCardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KudosCardFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KudosCardCountAggregateInputType | true
    }

  export interface KudosCardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KudosCard'], meta: { name: 'KudosCard' } }
    /**
     * Find zero or one KudosCard that matches the filter.
     * @param {KudosCardFindUniqueArgs} args - Arguments to find a KudosCard
     * @example
     * // Get one KudosCard
     * const kudosCard = await prisma.kudosCard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KudosCardFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, KudosCardFindUniqueArgs<ExtArgs>>
    ): Prisma__KudosCardClient<$Result.GetResult<Prisma.$KudosCardPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one KudosCard that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {KudosCardFindUniqueOrThrowArgs} args - Arguments to find a KudosCard
     * @example
     * // Get one KudosCard
     * const kudosCard = await prisma.kudosCard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends KudosCardFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KudosCardFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__KudosCardClient<$Result.GetResult<Prisma.$KudosCardPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first KudosCard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KudosCardFindFirstArgs} args - Arguments to find a KudosCard
     * @example
     * // Get one KudosCard
     * const kudosCard = await prisma.kudosCard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KudosCardFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, KudosCardFindFirstArgs<ExtArgs>>
    ): Prisma__KudosCardClient<$Result.GetResult<Prisma.$KudosCardPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first KudosCard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KudosCardFindFirstOrThrowArgs} args - Arguments to find a KudosCard
     * @example
     * // Get one KudosCard
     * const kudosCard = await prisma.kudosCard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends KudosCardFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KudosCardFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__KudosCardClient<$Result.GetResult<Prisma.$KudosCardPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more KudosCards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KudosCardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KudosCards
     * const kudosCards = await prisma.kudosCard.findMany()
     * 
     * // Get first 10 KudosCards
     * const kudosCards = await prisma.kudosCard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kudosCardWithIdOnly = await prisma.kudosCard.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends KudosCardFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KudosCardFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KudosCardPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a KudosCard.
     * @param {KudosCardCreateArgs} args - Arguments to create a KudosCard.
     * @example
     * // Create one KudosCard
     * const KudosCard = await prisma.kudosCard.create({
     *   data: {
     *     // ... data to create a KudosCard
     *   }
     * })
     * 
    **/
    create<T extends KudosCardCreateArgs<ExtArgs>>(
      args: SelectSubset<T, KudosCardCreateArgs<ExtArgs>>
    ): Prisma__KudosCardClient<$Result.GetResult<Prisma.$KudosCardPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many KudosCards.
     * @param {KudosCardCreateManyArgs} args - Arguments to create many KudosCards.
     * @example
     * // Create many KudosCards
     * const kudosCard = await prisma.kudosCard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends KudosCardCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KudosCardCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KudosCards and returns the data saved in the database.
     * @param {KudosCardCreateManyAndReturnArgs} args - Arguments to create many KudosCards.
     * @example
     * // Create many KudosCards
     * const kudosCard = await prisma.kudosCard.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KudosCards and only return the `id`
     * const kudosCardWithIdOnly = await prisma.kudosCard.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends KudosCardCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, KudosCardCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KudosCardPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a KudosCard.
     * @param {KudosCardDeleteArgs} args - Arguments to delete one KudosCard.
     * @example
     * // Delete one KudosCard
     * const KudosCard = await prisma.kudosCard.delete({
     *   where: {
     *     // ... filter to delete one KudosCard
     *   }
     * })
     * 
    **/
    delete<T extends KudosCardDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, KudosCardDeleteArgs<ExtArgs>>
    ): Prisma__KudosCardClient<$Result.GetResult<Prisma.$KudosCardPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one KudosCard.
     * @param {KudosCardUpdateArgs} args - Arguments to update one KudosCard.
     * @example
     * // Update one KudosCard
     * const kudosCard = await prisma.kudosCard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KudosCardUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, KudosCardUpdateArgs<ExtArgs>>
    ): Prisma__KudosCardClient<$Result.GetResult<Prisma.$KudosCardPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more KudosCards.
     * @param {KudosCardDeleteManyArgs} args - Arguments to filter KudosCards to delete.
     * @example
     * // Delete a few KudosCards
     * const { count } = await prisma.kudosCard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KudosCardDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KudosCardDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KudosCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KudosCardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KudosCards
     * const kudosCard = await prisma.kudosCard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KudosCardUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, KudosCardUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one KudosCard.
     * @param {KudosCardUpsertArgs} args - Arguments to update or create a KudosCard.
     * @example
     * // Update or create a KudosCard
     * const kudosCard = await prisma.kudosCard.upsert({
     *   create: {
     *     // ... data to create a KudosCard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KudosCard we want to update
     *   }
     * })
    **/
    upsert<T extends KudosCardUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, KudosCardUpsertArgs<ExtArgs>>
    ): Prisma__KudosCardClient<$Result.GetResult<Prisma.$KudosCardPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of KudosCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KudosCardCountArgs} args - Arguments to filter KudosCards to count.
     * @example
     * // Count the number of KudosCards
     * const count = await prisma.kudosCard.count({
     *   where: {
     *     // ... the filter for the KudosCards we want to count
     *   }
     * })
    **/
    count<T extends KudosCardCountArgs>(
      args?: Subset<T, KudosCardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KudosCardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KudosCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KudosCardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KudosCardAggregateArgs>(args: Subset<T, KudosCardAggregateArgs>): Prisma.PrismaPromise<GetKudosCardAggregateType<T>>

    /**
     * Group by KudosCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KudosCardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KudosCardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KudosCardGroupByArgs['orderBy'] }
        : { orderBy?: KudosCardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KudosCardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKudosCardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KudosCard model
   */
  readonly fields: KudosCardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KudosCard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KudosCardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the KudosCard model
   */ 
  interface KudosCardFieldRefs {
    readonly id: FieldRef<"KudosCard", 'Int'>
    readonly title: FieldRef<"KudosCard", 'String'>
    readonly gifUrl: FieldRef<"KudosCard", 'String'>
    readonly KBid: FieldRef<"KudosCard", 'Int'>
    readonly description: FieldRef<"KudosCard", 'String'>
    readonly upvote: FieldRef<"KudosCard", 'Int'>
    readonly owner: FieldRef<"KudosCard", 'String'>
  }
    

  // Custom InputTypes
  /**
   * KudosCard findUnique
   */
  export type KudosCardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KudosCard
     */
    select?: KudosCardSelect<ExtArgs> | null
    /**
     * Filter, which KudosCard to fetch.
     */
    where: KudosCardWhereUniqueInput
  }

  /**
   * KudosCard findUniqueOrThrow
   */
  export type KudosCardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KudosCard
     */
    select?: KudosCardSelect<ExtArgs> | null
    /**
     * Filter, which KudosCard to fetch.
     */
    where: KudosCardWhereUniqueInput
  }

  /**
   * KudosCard findFirst
   */
  export type KudosCardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KudosCard
     */
    select?: KudosCardSelect<ExtArgs> | null
    /**
     * Filter, which KudosCard to fetch.
     */
    where?: KudosCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KudosCards to fetch.
     */
    orderBy?: KudosCardOrderByWithRelationInput | KudosCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KudosCards.
     */
    cursor?: KudosCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KudosCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KudosCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KudosCards.
     */
    distinct?: KudosCardScalarFieldEnum | KudosCardScalarFieldEnum[]
  }

  /**
   * KudosCard findFirstOrThrow
   */
  export type KudosCardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KudosCard
     */
    select?: KudosCardSelect<ExtArgs> | null
    /**
     * Filter, which KudosCard to fetch.
     */
    where?: KudosCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KudosCards to fetch.
     */
    orderBy?: KudosCardOrderByWithRelationInput | KudosCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KudosCards.
     */
    cursor?: KudosCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KudosCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KudosCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KudosCards.
     */
    distinct?: KudosCardScalarFieldEnum | KudosCardScalarFieldEnum[]
  }

  /**
   * KudosCard findMany
   */
  export type KudosCardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KudosCard
     */
    select?: KudosCardSelect<ExtArgs> | null
    /**
     * Filter, which KudosCards to fetch.
     */
    where?: KudosCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KudosCards to fetch.
     */
    orderBy?: KudosCardOrderByWithRelationInput | KudosCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KudosCards.
     */
    cursor?: KudosCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KudosCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KudosCards.
     */
    skip?: number
    distinct?: KudosCardScalarFieldEnum | KudosCardScalarFieldEnum[]
  }

  /**
   * KudosCard create
   */
  export type KudosCardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KudosCard
     */
    select?: KudosCardSelect<ExtArgs> | null
    /**
     * The data needed to create a KudosCard.
     */
    data: XOR<KudosCardCreateInput, KudosCardUncheckedCreateInput>
  }

  /**
   * KudosCard createMany
   */
  export type KudosCardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KudosCards.
     */
    data: KudosCardCreateManyInput | KudosCardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KudosCard createManyAndReturn
   */
  export type KudosCardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KudosCard
     */
    select?: KudosCardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many KudosCards.
     */
    data: KudosCardCreateManyInput | KudosCardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KudosCard update
   */
  export type KudosCardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KudosCard
     */
    select?: KudosCardSelect<ExtArgs> | null
    /**
     * The data needed to update a KudosCard.
     */
    data: XOR<KudosCardUpdateInput, KudosCardUncheckedUpdateInput>
    /**
     * Choose, which KudosCard to update.
     */
    where: KudosCardWhereUniqueInput
  }

  /**
   * KudosCard updateMany
   */
  export type KudosCardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KudosCards.
     */
    data: XOR<KudosCardUpdateManyMutationInput, KudosCardUncheckedUpdateManyInput>
    /**
     * Filter which KudosCards to update
     */
    where?: KudosCardWhereInput
  }

  /**
   * KudosCard upsert
   */
  export type KudosCardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KudosCard
     */
    select?: KudosCardSelect<ExtArgs> | null
    /**
     * The filter to search for the KudosCard to update in case it exists.
     */
    where: KudosCardWhereUniqueInput
    /**
     * In case the KudosCard found by the `where` argument doesn't exist, create a new KudosCard with this data.
     */
    create: XOR<KudosCardCreateInput, KudosCardUncheckedCreateInput>
    /**
     * In case the KudosCard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KudosCardUpdateInput, KudosCardUncheckedUpdateInput>
  }

  /**
   * KudosCard delete
   */
  export type KudosCardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KudosCard
     */
    select?: KudosCardSelect<ExtArgs> | null
    /**
     * Filter which KudosCard to delete.
     */
    where: KudosCardWhereUniqueInput
  }

  /**
   * KudosCard deleteMany
   */
  export type KudosCardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KudosCards to delete
     */
    where?: KudosCardWhereInput
  }

  /**
   * KudosCard without action
   */
  export type KudosCardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KudosCard
     */
    select?: KudosCardSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const KudosBoardScalarFieldEnum: {
    id: 'id',
    imgUrl: 'imgUrl',
    title: 'title',
    category: 'category',
    author: 'author'
  };

  export type KudosBoardScalarFieldEnum = (typeof KudosBoardScalarFieldEnum)[keyof typeof KudosBoardScalarFieldEnum]


  export const KudosCardScalarFieldEnum: {
    id: 'id',
    title: 'title',
    gifUrl: 'gifUrl',
    KBid: 'KBid',
    description: 'description',
    upvote: 'upvote',
    owner: 'owner'
  };

  export type KudosCardScalarFieldEnum = (typeof KudosCardScalarFieldEnum)[keyof typeof KudosCardScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type KudosBoardWhereInput = {
    AND?: KudosBoardWhereInput | KudosBoardWhereInput[]
    OR?: KudosBoardWhereInput[]
    NOT?: KudosBoardWhereInput | KudosBoardWhereInput[]
    id?: IntFilter<"KudosBoard"> | number
    imgUrl?: StringFilter<"KudosBoard"> | string
    title?: StringFilter<"KudosBoard"> | string
    category?: StringFilter<"KudosBoard"> | string
    author?: StringFilter<"KudosBoard"> | string
  }

  export type KudosBoardOrderByWithRelationInput = {
    id?: SortOrder
    imgUrl?: SortOrder
    title?: SortOrder
    category?: SortOrder
    author?: SortOrder
  }

  export type KudosBoardWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: KudosBoardWhereInput | KudosBoardWhereInput[]
    OR?: KudosBoardWhereInput[]
    NOT?: KudosBoardWhereInput | KudosBoardWhereInput[]
    imgUrl?: StringFilter<"KudosBoard"> | string
    title?: StringFilter<"KudosBoard"> | string
    category?: StringFilter<"KudosBoard"> | string
    author?: StringFilter<"KudosBoard"> | string
  }, "id" | "id">

  export type KudosBoardOrderByWithAggregationInput = {
    id?: SortOrder
    imgUrl?: SortOrder
    title?: SortOrder
    category?: SortOrder
    author?: SortOrder
    _count?: KudosBoardCountOrderByAggregateInput
    _avg?: KudosBoardAvgOrderByAggregateInput
    _max?: KudosBoardMaxOrderByAggregateInput
    _min?: KudosBoardMinOrderByAggregateInput
    _sum?: KudosBoardSumOrderByAggregateInput
  }

  export type KudosBoardScalarWhereWithAggregatesInput = {
    AND?: KudosBoardScalarWhereWithAggregatesInput | KudosBoardScalarWhereWithAggregatesInput[]
    OR?: KudosBoardScalarWhereWithAggregatesInput[]
    NOT?: KudosBoardScalarWhereWithAggregatesInput | KudosBoardScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"KudosBoard"> | number
    imgUrl?: StringWithAggregatesFilter<"KudosBoard"> | string
    title?: StringWithAggregatesFilter<"KudosBoard"> | string
    category?: StringWithAggregatesFilter<"KudosBoard"> | string
    author?: StringWithAggregatesFilter<"KudosBoard"> | string
  }

  export type KudosCardWhereInput = {
    AND?: KudosCardWhereInput | KudosCardWhereInput[]
    OR?: KudosCardWhereInput[]
    NOT?: KudosCardWhereInput | KudosCardWhereInput[]
    id?: IntFilter<"KudosCard"> | number
    title?: StringFilter<"KudosCard"> | string
    gifUrl?: StringFilter<"KudosCard"> | string
    KBid?: IntFilter<"KudosCard"> | number
    description?: StringFilter<"KudosCard"> | string
    upvote?: IntFilter<"KudosCard"> | number
    owner?: StringFilter<"KudosCard"> | string
  }

  export type KudosCardOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    gifUrl?: SortOrder
    KBid?: SortOrder
    description?: SortOrder
    upvote?: SortOrder
    owner?: SortOrder
  }

  export type KudosCardWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: KudosCardWhereInput | KudosCardWhereInput[]
    OR?: KudosCardWhereInput[]
    NOT?: KudosCardWhereInput | KudosCardWhereInput[]
    title?: StringFilter<"KudosCard"> | string
    gifUrl?: StringFilter<"KudosCard"> | string
    KBid?: IntFilter<"KudosCard"> | number
    description?: StringFilter<"KudosCard"> | string
    upvote?: IntFilter<"KudosCard"> | number
    owner?: StringFilter<"KudosCard"> | string
  }, "id" | "id">

  export type KudosCardOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    gifUrl?: SortOrder
    KBid?: SortOrder
    description?: SortOrder
    upvote?: SortOrder
    owner?: SortOrder
    _count?: KudosCardCountOrderByAggregateInput
    _avg?: KudosCardAvgOrderByAggregateInput
    _max?: KudosCardMaxOrderByAggregateInput
    _min?: KudosCardMinOrderByAggregateInput
    _sum?: KudosCardSumOrderByAggregateInput
  }

  export type KudosCardScalarWhereWithAggregatesInput = {
    AND?: KudosCardScalarWhereWithAggregatesInput | KudosCardScalarWhereWithAggregatesInput[]
    OR?: KudosCardScalarWhereWithAggregatesInput[]
    NOT?: KudosCardScalarWhereWithAggregatesInput | KudosCardScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"KudosCard"> | number
    title?: StringWithAggregatesFilter<"KudosCard"> | string
    gifUrl?: StringWithAggregatesFilter<"KudosCard"> | string
    KBid?: IntWithAggregatesFilter<"KudosCard"> | number
    description?: StringWithAggregatesFilter<"KudosCard"> | string
    upvote?: IntWithAggregatesFilter<"KudosCard"> | number
    owner?: StringWithAggregatesFilter<"KudosCard"> | string
  }

  export type KudosBoardCreateInput = {
    imgUrl: string
    title: string
    category: string
    author: string
  }

  export type KudosBoardUncheckedCreateInput = {
    id?: number
    imgUrl: string
    title: string
    category: string
    author: string
  }

  export type KudosBoardUpdateInput = {
    imgUrl?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
  }

  export type KudosBoardUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    imgUrl?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
  }

  export type KudosBoardCreateManyInput = {
    id?: number
    imgUrl: string
    title: string
    category: string
    author: string
  }

  export type KudosBoardUpdateManyMutationInput = {
    imgUrl?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
  }

  export type KudosBoardUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    imgUrl?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
  }

  export type KudosCardCreateInput = {
    title: string
    gifUrl: string
    KBid: number
    description: string
    upvote: number
    owner: string
  }

  export type KudosCardUncheckedCreateInput = {
    id?: number
    title: string
    gifUrl: string
    KBid: number
    description: string
    upvote: number
    owner: string
  }

  export type KudosCardUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    gifUrl?: StringFieldUpdateOperationsInput | string
    KBid?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    upvote?: IntFieldUpdateOperationsInput | number
    owner?: StringFieldUpdateOperationsInput | string
  }

  export type KudosCardUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    gifUrl?: StringFieldUpdateOperationsInput | string
    KBid?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    upvote?: IntFieldUpdateOperationsInput | number
    owner?: StringFieldUpdateOperationsInput | string
  }

  export type KudosCardCreateManyInput = {
    id?: number
    title: string
    gifUrl: string
    KBid: number
    description: string
    upvote: number
    owner: string
  }

  export type KudosCardUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    gifUrl?: StringFieldUpdateOperationsInput | string
    KBid?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    upvote?: IntFieldUpdateOperationsInput | number
    owner?: StringFieldUpdateOperationsInput | string
  }

  export type KudosCardUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    gifUrl?: StringFieldUpdateOperationsInput | string
    KBid?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    upvote?: IntFieldUpdateOperationsInput | number
    owner?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type KudosBoardCountOrderByAggregateInput = {
    id?: SortOrder
    imgUrl?: SortOrder
    title?: SortOrder
    category?: SortOrder
    author?: SortOrder
  }

  export type KudosBoardAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type KudosBoardMaxOrderByAggregateInput = {
    id?: SortOrder
    imgUrl?: SortOrder
    title?: SortOrder
    category?: SortOrder
    author?: SortOrder
  }

  export type KudosBoardMinOrderByAggregateInput = {
    id?: SortOrder
    imgUrl?: SortOrder
    title?: SortOrder
    category?: SortOrder
    author?: SortOrder
  }

  export type KudosBoardSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type KudosCardCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    gifUrl?: SortOrder
    KBid?: SortOrder
    description?: SortOrder
    upvote?: SortOrder
    owner?: SortOrder
  }

  export type KudosCardAvgOrderByAggregateInput = {
    id?: SortOrder
    KBid?: SortOrder
    upvote?: SortOrder
  }

  export type KudosCardMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    gifUrl?: SortOrder
    KBid?: SortOrder
    description?: SortOrder
    upvote?: SortOrder
    owner?: SortOrder
  }

  export type KudosCardMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    gifUrl?: SortOrder
    KBid?: SortOrder
    description?: SortOrder
    upvote?: SortOrder
    owner?: SortOrder
  }

  export type KudosCardSumOrderByAggregateInput = {
    id?: SortOrder
    KBid?: SortOrder
    upvote?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use KudosBoardDefaultArgs instead
     */
    export type KudosBoardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KudosBoardDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KudosCardDefaultArgs instead
     */
    export type KudosCardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KudosCardDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}